import Logic.Modal.Basic.Formula
import Logic.Modal.Basic.HilbertStyle
import Logic.Modal.Basic.Semantics

namespace LO.Modal

namespace Hilbert

open Formula FrameConsequence

variable {Œ± Œ≤ : Type u}

theorem LogicK.sounds (Œì : Set (Formula Œ±)) (p : Formula Œ±) (f : Frame Œ≤) (d : Œì ‚ä¢·¥¥(ùêä) p) : (Œì ‚ä®·∂†[f] p) := by
  induction d <;> try {simp_all [satisfies_imp, satisfies];}
  case wk _ _ _ hŒìŒî _ ih =>
    apply preserveWeakening hŒìŒî ih;
  case maxm Œì p ih =>
    let ‚ü®_, ‚ü®_, hq‚ü©‚ü© := ih; rw [‚Üêhq];
    apply preserveAxiomK;
  case disj‚ÇÉ p q r =>
    intro V w;
    by_cases (w ‚äßÀ¢[‚ü®f, V‚ü©] p) <;> simp_all [satisfies_imp, satisfies];
  case necessitation _ p _ ih =>
    exact preserveNecessitation ih;

lemma LogicK.weakSounds {p : Formula Œ±} (f : Frame Œ≤) (h : ‚ä¢·¥¥(ùêä) p) : (‚äß·∂†[f] p) := by
  simpa using sounds ‚àÖ p f h;

theorem LogicK.unprovable_bot {f : Frame Œ≤} : (‚ä¨·¥¥(ùêä)! (‚ä• : Formula Œ±)) := by
  by_contra hC; simp at hC;
  suffices h : ‚äß·∂†[f] (‚ä• : Formula Œ±) by exact frames_bot h;
  exact weakSounds f hC.some;

end Hilbert

end LO.Modal

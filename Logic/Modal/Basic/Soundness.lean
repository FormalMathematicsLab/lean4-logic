import Logic.Modal.Basic.Formula
import Logic.Modal.Basic.HilbertStyle
import Logic.Modal.Basic.Semantics

namespace LO

namespace Modal

open Formula

variable {Œ± Œ≤ : Type u} {p : Formula Œ±} (f : Frame Œ≤)

theorem Hilbert.LogicK.provable_soundness {p : Formula Œ±} (f : Frame Œ≤) : (‚ä¢·¥¥(ùóû)! p) ‚Üí (‚äß·∂†[f] p) := by
  intro h;
  cases' h.some <;> simp_all [satisfies_imp, satisfies];
  case disj‚ÇÉ p =>
    intro V w;
    by_cases (w ‚äßÀ¢[‚ü®f, V‚ü©] p) <;> simp_all;
  case modus_ponens q d‚ÇÅ d‚ÇÇ => exact frames_ModusPonens (provable_soundness f (Nonempty.intro d‚ÇÇ)) (provable_soundness f (Nonempty.intro d‚ÇÅ));
  case necessitation q d => exact frames_Necessitation $ provable_soundness f (Nonempty.intro d);
  termination_by provable_soundness p f d => (d.some.length)

theorem Hilbert.LogicK.unprovable_bot : (‚ä¨·¥¥(ùóû)! (‚ä• : Formula Œ±)) := by
  by_contra hC; simp at hC;
  have w := f.nonempty.some;
  suffices ‚äß·∂†[f] (‚ä• : Formula Œ±) by simp_all [satisfies_bot]; exact this w;
  exact provable_soundness f hC;

end Modal

end LO

import Logic.Modal.Basic.Formula
import Logic.Modal.Basic.HilbertStyle
import Logic.Modal.Basic.Semantics

namespace LO

namespace Modal

open Formula

variable {Œ± Œ≤ : Type u} {p : Formula Œ±} (f : Frame Œ≤)

theorem Hilbert.LogicK.provable_soundness {p : Formula Œ±} (f : Frame Œ≤) : (‚ä¢·¥¥(ùóû)! p) ‚Üí (‚äß·∂†[f] p) := by
  intro h;
  induction h.some <;> try {simp_all [satisfies_imp, satisfies];}
  case disj‚ÇÉ p q r =>
    intro V w;
    by_cases (w ‚äßÀ¢[‚ü®f, V‚ü©] p) <;> simp_all [satisfies_imp, satisfies];
  case modus_ponens p q d‚ÇÅ d‚ÇÇ ih‚ÇÅ ih‚ÇÇ => exact frames_ModusPonens (ih‚ÇÅ ‚ü®d‚ÇÅ‚ü©) (ih‚ÇÇ ‚ü®d‚ÇÇ‚ü©);
  case necessitation p d ih => exact frames_Necessitation (ih ‚ü®d‚ü©);

theorem Hilbert.LogicK.unprovable_bot : (‚ä¨·¥¥(ùóû)! (‚ä• : Formula Œ±)) := by
  by_contra hC; simp at hC;
  have w := f.nonempty.some;
  suffices ‚äß·∂†[f] (‚ä• : Formula Œ±) by simp_all [satisfies_bot]; exact this w;
  exact provable_soundness f hC;

end Modal

end LO

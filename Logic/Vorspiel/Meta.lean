import Mathlib.Data.Nat.Basic
import Lean.Elab.Tactic.Basic
import Mathlib.Tactic.NormNum
import Mathlib.Tactic.Clear!
import Mathlib.Util.AtomM
import Logic.Vorspiel.Vorspiel
import Mathlib.Data.Fin.Fin2

open Qq Lean Elab Meta Tactic

universe u v

inductive DbgResult (Œ± : Type u) : Œ± ‚Üí Type u
  | intro : (a b : Œ±) ‚Üí a = b ‚Üí DbgResult Œ± a

instance {Œ±} (a : Œ±) : ToString (DbgResult Œ± a) := ‚ü®fun r =>
  match r with
  | DbgResult.intro _ _ _ => "üéâ Proof Success! üéâ"‚ü©

namespace Qq

def rflQ {Œ± : Q(Sort u)} (a : Q($Œ±)) : Q($a = $a) := q(rfl)

set_option linter.unusedVariables false in
def decideTQ (p : Q(Prop)) : MetaM Q($p) := do
  let dec : Q(Decidable $p) ‚Üê synthInstanceQ q(Decidable $p)
  let h : Q(decide $p = true) := rflQ q(true)
  return q(of_decide_eq_true $h)

def finQVal {n : Q(‚Ñï)} (e : Q(Fin $n)) : MetaM (Option ‚Ñï) := do
  let val : Q(‚Ñï) ‚Üê whnf q(Fin.val $e)
  val.natLit?

-- Returns literal f e when e is literal
def natAppFunQ (f : ‚Ñï ‚Üí ‚Ñï) (e : Q(‚Ñï)) : MetaM Q(‚Ñï) := do
  let e : Q(‚Ñï) ‚Üê whnf e
  let some n := Lean.Expr.natLit? e | throwError "not ‚Ñï"
  Lean.Expr.ofNat q(‚Ñï) (f n)

-- https://leanprover-community.github.io/mathlib4_docs//Mathlib/Tactic/Linarith/Verification.html#Qq.inferTypeQ'
def inferSortQ' (e : Expr) : MetaM ((u : Level) √ó (Œ± : Q(Sort $u)) √ó Q($Œ±)) := do
  let Œ± ‚Üê inferType e
  let .sort u ‚Üê instantiateMVars (‚Üê whnf (‚Üê inferType Œ±))
    | throwError "not a type{indentExpr Œ±}"
  pure ‚ü®u, Œ±, e‚ü©

-- given an Expr e representing type Œ± : Sort u, returns u and q(Œ±)
def checkSortQ' (e : Expr) : MetaM (Option ((u : Level) √ó Q(Sort $u))) := do
  if let ‚ü®.succ u, Œ±, e‚ü© ‚Üê inferSortQ' e then
    if ‚Üê isDefEq Œ± q(Sort $u) then
      return some ‚ü®u, e‚ü©
    else return none
  else return none

def inferSortQOfUniverse' (e : Expr) (ty : Q(Sort $u)) : MetaM (Option Q($ty)) := do
  if let ‚ü®.succ _, Œ±, e‚ü© ‚Üê inferSortQ' e then
    if ‚Üê isDefEq Œ± q($ty) then
      return some e
    else return none
  else return none

set_option linter.unusedVariables false in
def MditeQ {Œ± : Q(Sort u)} (c : Q(Prop)) (dec : Q(Decidable $c)) (t : MetaM Q($c ‚Üí $Œ±)) (e : MetaM Q(¬¨$c ‚Üí $Œ±)) : MetaM Q($Œ±) := do
  let t ‚Üê t
  let e ‚Üê e
  return q(dite $c (fun h => $t h) (fun h => $e h))

set_option linter.unusedVariables false in
def BEqQ {Œ± : Q(Sort u)} {a b : Q($Œ±)} (h : a == b) : Q($a = $b) := (q(@rfl $Œ± $a) : Expr)

def eqQUnsafe {Œ± : Q(Sort u)} (a b : Q($Œ±)) : Q($a = $b) := (q(@rfl $Œ± $a) : Expr)

def toQList {Œ± : Q(Type u)} : List Q($Œ±) ‚Üí Q(List $Œ±)
  | []     => q([])
  | a :: v => q($a :: $(toQList v))

partial def ofQList {Œ± : Q(Type u)} (l : Q(List $Œ±)) : MetaM $ List Q($Œ±) := do
  match l with
  | ~q([])       => return []
  | ~q($a :: $l) => return a :: (‚Üê ofQList l)

def isStrongEq (t s : Expr) : MetaM Bool := do isDefEq (‚Üê whnf t) (‚Üê whnf s)

elab "equalTest" : term => do
  let e‚ÇÅ : Q(Fin 3) := q(2)
  let e‚ÇÇ : Q(Fin (.succ (.succ 1))) := q(Fin.succ 1)
  let b‚ÇÅ := e‚ÇÅ == e‚ÇÇ
  let b‚ÇÇ ‚Üê isDefEq e‚ÇÅ e‚ÇÇ
  let b‚ÇÉ ‚Üê isStrongEq e‚ÇÅ e‚ÇÇ
  logInfo m!"e‚ÇÅ == e‚ÇÇ: {b‚ÇÅ}"
  logInfo m!"isDefEq e‚ÇÅ e‚ÇÇ: {b‚ÇÇ}"
  logInfo m!"isStrongEq e‚ÇÅ e‚ÇÇ: {b‚ÇÉ}"
  return q(0)

#eval equalTest

section List
variable {Œ± : Type u}

lemma List.mem_of_eq {a b : Œ±} {l} (h : a = b) : a ‚àà b :: l := by simp[h]

lemma List.mem_of_mem {a b : Œ±} {l : List Œ±} (h : a ‚àà l) : a ‚àà b :: l := by simp[h]

def memQList? {Œ± : Q(Type u)} (a : Q($Œ±)) : (l : List Q($Œ±)) ‚Üí MetaM $  Option Q($a ‚àà $(toQList (u := u) l))
  | []     => return none
  | b :: l => do
      if (‚Üê isDefEq (‚Üê whnf a) (‚Üê whnf b)) then
        let e : Q($a = $b) := rflQ a
        return some q(List.mem_of_eq $e)
      else
        let some h ‚Üê memQList? a l | return none
        return by simp at h ‚ä¢; exact some q(List.mem_of_mem $h)

example : 2 ‚àà [3,4,5,2,6] := of_decide_eq_true rfl

lemma List.cons_congr {a b : Œ±} {l k : List Œ±} (ha : a = b) (hl : l = k) : a :: l = b :: k :=
  congr_arg‚ÇÇ _ ha hl

def resultList {Œ± : Q(Type u)} (res : (a : Q($Œ±)) ‚Üí MetaM ((res : Q($Œ±)) √ó Q($a = $res))) :
    (l : List Q($Œ±)) ‚Üí MetaM ((lres : List Q($Œ±)) √ó Q($(toQList (u := u) l) = $(toQList (u := u) lres)))
  | []     => pure ‚ü®[], q(rfl)‚ü©
  | a :: l => do
    let ‚ü®an, e‚ü© ‚Üê res a
    let ‚ü®ihl, ihe‚ü© ‚Üê resultList res l
    return ‚ü®an :: ihl, q(List.cons_congr $e $ihe)‚ü©

def funResultList {Œ± Œ≤ : Q(Type u)} (f : Q($Œ± ‚Üí $Œ≤)) (res : (a : Q($Œ±)) ‚Üí MetaM ((res : Q($Œ≤)) √ó Q($f $a = $res))) :
    (l : List Q($Œ±)) ‚Üí MetaM ((lres : List Q($Œ≤)) √ó Q(List.map $f $(toQList (u := u) l) = $(toQList (u := u) lres)))
  | []     => pure ‚ü®[], q(rfl)‚ü©
  | a :: l => do
    let ‚ü®an, e‚ü© ‚Üê res a
    let ‚ü®ihl, ihe‚ü© ‚Üê funResultList f res l
    return ‚ü®an :: ihl, q(List.cons_congr $e $ihe)‚ü©

end List

structure Result {Œ± : Q(Type u)} (e : Q($Œ±)) where
  res : Q($Œ±)
  eq : Q($e = $res)

structure ResultFun {Œ± : Q(Type u)} {Œ≤ : Q(Type v)} (f : Q($Œ± ‚Üí $Œ≤)) (e : Q($Œ±)) where
  res : Q($Œ≤)
  eq : Q($f $e = $res)

namespace Result
variable {Œ± : Q(Type u)}

def refl (e : Q($Œ±)) : Result e := ‚ü®e, q(rfl)‚ü©

end Result

namespace ResultFun
variable {Œ± : Q(Type u)} {Œ≤ : Q(Type v)} (f : Q($Œ± ‚Üí $Œ≤))

def refl (e : Q($Œ±)) : ResultFun f e := ‚ü®q($f $e), q(rfl)‚ü©

end ResultFun

lemma compVecEmpty {Œ± : Type u} {Œ≤ : Type v} (f : Œ± ‚Üí Œ≤) : f ‚àò ![] = ![] := by simp

lemma compVecCons {Œ± : Type u} {Œ≤ : Type v} (f : Œ± ‚Üí Œ≤) {n}
  {a : Œ±} {as : Fin n ‚Üí Œ±} {b : Œ≤} {bs : Fin n ‚Üí Œ≤} (hb : f a = b) (hbs : f ‚àò as = bs) :
    f ‚àò (a :> as) = b :> bs := by simp[Function.comp, Matrix.comp_vecCons, hb, ‚Üêhbs]

lemma vecConsExt {Œ± : Type u} {n}
  {a : Œ±} {as : Fin n ‚Üí Œ±} {b : Œ±} {bs : Fin n ‚Üí Œ±} (hb : a = b) (hbs : as = bs) :
    a :> as = b :> bs := hb ‚ñ∏ hbs ‚ñ∏ rfl

partial def mapVector {Œ± : Q(Type u)} {Œ≤ : Q(Type v)}
  (r : Q($Œ±) ‚Üí MetaM Q($Œ≤))
  (n : Q(‚Ñï)) (l : Q(Fin $n ‚Üí $Œ±)) : MetaM Q(Fin $n ‚Üí $Œ≤) := do
  match n with
  | ~q(0) =>
    match l with
    | ~q(![]) =>
      return q(![])
  | ~q($n + 1) =>
    match l with
    | ~q($a :> $as) =>
      let b ‚Üê r a
      let bs ‚Üê mapVector r n as
      return q($b :> $bs)
    | _ => throwError m!"error in mapVector(2). nonexhaustive match: {n}, {l}"
  | _ => throwError m!"error in mapVector(1). nonexhaustive match: {n}"

partial def resultVectorOfResult {Œ± : Q(Type u)}
  (r : (e : Q($Œ±)) ‚Üí MetaM ((r : Q($Œ±)) √ó Q($e = $r)))
  (n : Q(‚Ñï)) (l : Q(Fin $n ‚Üí $Œ±)) : MetaM ((l' : Q(Fin $n ‚Üí $Œ±)) √ó Q($l = $l')) := do
  match n with
  | ~q(0) =>
    match l with
    | ~q(![]) =>
      return ‚ü®q(![]), q(rfl)‚ü©
  | ~q($n + 1) =>
    match l with
    | ~q($a :> $as) =>
      let ‚ü®b, be‚ü© ‚Üê r a
      let ‚ü®bs, bse‚ü© ‚Üê resultVectorOfResult r n as
      return ‚ü®q($b :> $bs), q(vecConsExt $be $bse)‚ü©
    | _ => throwError m!"error in resultVectorOfResult(2). nonexhaustive match: {l}"
  | _ => throwError m!"error in resultVectorOfResult(1). nonexhaustive match: {n}"

partial def resultVectorOfResultFun {Œ± : Q(Type u)} {Œ≤ : Q(Type v)}
  (f : Q($Œ± ‚Üí $Œ≤)) (r : (e : Q($Œ±)) ‚Üí MetaM ((r : Q($Œ≤)) √ó Q($f $e = $r)))
  (n : Q(‚Ñï)) (l : Q(Fin $n ‚Üí $Œ±)) : MetaM ((l' : Q(Fin $n ‚Üí $Œ≤)) √ó Q($f ‚àò $l = $l')) := do
  match n with
  | ~q(0) =>
    match l with
    | ~q(![]) =>
      return ‚ü®q(![]), q(compVecEmpty $f)‚ü©
  | ~q($n + 1) =>
    match l with
    | ~q($a :> $as) =>
      let ‚ü®b, be‚ü© ‚Üê r a
      let ‚ü®bs, bse‚ü© ‚Üê resultVectorOfResultFun f r n as
      return ‚ü®q($b :> $bs), q(compVecCons $f $be $bse)‚ü©
    | _ => throwError m!"error in resultVectorOfResultFun(2). nonexhaustive match: {n}, {l}"
  | _ => throwError m!"error in resultVectorOfResultFun(1). nonexhaustive match: {n}"

partial def vectorCollection {Œ± : Q(Type u)} {Œ≤ : Q(Type v)} {H : Q($Œ± ‚Üí $Œ≤ ‚Üí Sort w)}
  (r : (a : Q($Œ±)) ‚Üí MetaM ((b : Q($Œ≤)) √ó Q($H $a $b)))
  (n : Q(‚Ñï)) (l : Q(Fin $n ‚Üí $Œ±)) : MetaM ((b : Q(Fin $n ‚Üí $Œ≤)) √ó Q((i : Fin $n) ‚Üí $H ($l i) ($b i))) := do
  match n with
  | ~q(0)      =>
    match l with
    | ~q(![])  =>
      return ‚ü®q(![]), q(finZeroElim)‚ü©
  | ~q($n' + 1) =>
    match l with
    | ~q($a :> $as) =>
      let p ‚Üê r a
      let ps ‚Üê vectorCollection r n' as
      let vectorConsQ
        {as : Q(Fin $n' ‚Üí $Œ±)}
        {bs : Q(Fin $n' ‚Üí $Œ≤)}
        (ih : Q((i : Fin $n') ‚Üí $H ($as i) ($bs i)))
        {a : Q($Œ±)} {b : Q($Œ≤)} (h : Q($H $a $b)) : Q((i : Fin ($n' + 1)) ‚Üí $H (($a :> $as) i) (($b :> $bs) i)) :=
        q(Fin.cases $h $ih)
      have h : Q((i : Fin ($n' + 1)) ‚Üí $H (($a :> $as) i) (($(p.1) :> $(ps.1)) i)) := vectorConsQ ps.2 p.2
      return ‚ü®q($(p.1) :> $(ps.1)), h‚ü©
    | _ => throwError m!"error in vectorCollection(2). nonexhaustive match: {n}, {l}"
  | _ => throwError m!"error in vectorCollection(1). nonexhaustive match: {n}"

-- def Result.toVector (n : Q(‚Ñï)) {Œ±: Q(Type u)}
--   (r : (e : Q($Œ±)) ‚Üí MetaM (Result e)) : (v : Q(Fin $n ‚Üí $Œ±)) ‚Üí MetaM (Result (u := u) v) :=
--   resultVectorOfResult (fun e => do by {  })

partial def mapVectorQ {Œ± : Q(Type u)} {Œ≤ : Q(Type v)} (f : Q($Œ±) ‚Üí MetaM Q($Œ≤))
    (n : Q(‚Ñï)) (l : Q(Fin $n ‚Üí $Œ±)) : MetaM Q(Fin $n ‚Üí $Œ≤) := do
  match n with
  | ~q(0) =>
    match l with
    | ~q(![]) =>
      return q(![])
  | ~q($n' + 1) =>
    match l with
    | ~q($a :> $as) =>
      let b : Q($Œ≤) ‚Üê f a
      let bs : Q(Fin $n' ‚Üí $Œ≤) ‚Üê mapVectorQ f n' as
      return q($b :> $bs)
    | _ => throwError m!"error in mapVectorQ(2). nonexhaustive match: {l}"
  | _ => throwError m!"error in mapVectorQ(1). nonexhaustive match: {n}"

elab "dbgmapVectorQ" : term => do
  let f : Q(‚Ñï) ‚Üí MetaM Q(‚Ñï) := fun x => whnf q($x * 3)
  let v : Q(Fin 5 ‚Üí ‚Ñï) := q(![0,1,2,3,4])
  let e ‚Üê mapVectorQ (u := levelZero) (Œ± := q(‚Ñï)) (Œ≤ := q(‚Ñï)) f q(5) v
  logInfo m! "{e}"
  return e

#eval dbgmapVectorQ

partial def vectorQNthAux {Œ± : Q(Type u)}
    (n : Q(‚Ñï)) (l : Q(Fin $n ‚Üí $Œ±)) (i : ‚Ñï) : MetaM Q($Œ±) := do
  match i with
  | 0 =>
    match n with
    | ~q(0) => throwError m!"out of bound"
    | ~q($n + 1) =>
      match l with
      | ~q($a :> _) => return a
      | _ => throwError m!"error in vectorQNthAux(2). nonexhaustive match: {l}"
  | .succ i' =>
    match n with
    | ~q(0) => throwError m!"out of bound"
    | ~q($n + 1) =>
      match l with
      | ~q(_ :> $l') => vectorQNthAux n l' i'
      | _ => throwError m!"error in vectorQNthAux(2). nonexhaustive match: {l}"

partial def vectorQNth {Œ± : Q(Type u)}
    (n : Q(‚Ñï)) (l : Q(Fin $n ‚Üí $Œ±)) (i : Q(Fin $n)) : MetaM ((a : Q($Œ±)) √ó Q($l $i = $a)) := do
    let some ival ‚Üê finQVal i | throwError m!"{i} should be numeral"
    let r ‚Üê vectorQNthAux (u := u) n l ival
    --let eq ‚Üê decideTQ q($l $i = $r)
    let eq : Expr := q(@rfl $Œ± $r)
    return ‚ü®r, eq‚ü©

elab "dbgvectorQNth" : term => do
  let v : Q(Fin 5 ‚Üí ‚Ñï) := q(![0,1 + 8,2 + 8,3,4])
  let ‚ü®e, eq‚ü© ‚Üê vectorQNth (Œ± := q(‚Ñï)) q(5) v q(2+1)
  let dbgr := q(DbgResult.intro _ $e $eq)
  logInfo m! "{e}"
  logInfo m! "{eq}"
  return dbgr

#eval dbgvectorQNth

private lemma vecCons_assoc_eq {a b : Œ±} {s : Fin n ‚Üí Œ±} (h : s <: b = t) :
    (a :> s) <: b = a :> t := by simp[‚Üêh, Matrix.vecCons_assoc]

partial def vectorAppend {Œ± : Q(Type u)}
    (n : Q(‚Ñï)) (v : Q(Fin $n ‚Üí $Œ±)) (a : Q($Œ±)) : MetaM ((w : Q(Fin ($n + 1) ‚Üí $Œ±)) √ó Q($v <: $a = $w)) := do
  match n with
  | ~q(0) => return ‚ü®q(![$a]), q(Matrix.vecConsLast_vecEmpty $a)‚ü©
  | ~q($n' + 1) =>
    match v with
    | ~q($b :> $v') =>
      let ‚ü®ih, ihh‚ü© ‚Üê vectorAppend n' v' a
      return ‚ü®q($b :> $ih), q(vecCons_assoc_eq $ihh)‚ü©
    | _ => throwError m!"error in vectorQNthAux(2). nonexhaustive match: {v}"

elab "dbgVectorAppend" : term => do
  let v : Q(Fin 5 ‚Üí ‚Ñï) := q(![0,1 + 8,2 + 8,3,4])
  let a : Q(‚Ñï) := q(8)
  let ‚ü®w, eq‚ü© ‚Üê vectorAppend (u := levelZero) q(5) v a
  let dbgr := q(DbgResult.intro _ _ $eq)
  logInfo m! "{w}"
  logInfo m! "{eq}"
  return dbgr

#eval dbgVectorAppend

end Qq

namespace Lean

namespace Expr

def stringLit? : Expr ‚Üí Option String
  | lit (Literal.strVal s) => some s
  | _                      => none

end Expr

end Lean

namespace List
variable {m : Type ‚Üí Type v} [inst : Monad m] {Œ± : Type u}

def elemM (r : Œ± ‚Üí Œ± ‚Üí m Bool) (a : Œ±) : List Œ± ‚Üí m Bool
  | [] => return false
  | b :: bs => do
    if (‚Üê r a b) then
      return true
    else
      bs.elemM r a

end List

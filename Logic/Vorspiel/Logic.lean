import Logic.Vorspiel.Vorspiel

namespace LO

namespace Logic

variable {F : Type u} [LogicSymbol F]

/- Deduction System of F -/

class Proof (F : Type u) [LogicSymbol F] where
  Bew : Set F ‚Üí F ‚Üí Type u
  axm : ‚àÄ {f}, f ‚àà T ‚Üí Bew T f 
  weakening' : ‚àÄ {T U f}, T ‚äÜ U ‚Üí Bew T f ‚Üí Bew U f

namespace Proof
variable [ùìë : Proof F]

instance : HasTurnstile F (Type u) := ‚ü®ùìë.Bew‚ü©

def BewTheory (T U : Set F) : Type u := {f : F} ‚Üí f ‚àà U ‚Üí T ‚ä¢ f

infix:45 " ‚ä¢* " => Proof.BewTheory

def BewTheoryEmpty (T : Set F) : T ‚ä¢* ‚àÖ := fun h => by contradiction

def BewTheory.ofSubset {T U : Set F} (h : U ‚äÜ T) : T ‚ä¢* U := fun hf => axm (h hf)

def BewTheory.refl (T : Set F) : T ‚ä¢* T := axm

def Consistent (T : Set F) : Prop := IsEmpty (T ‚ä¢ ‚ä•)

lemma weakening {T U : Set F} {f : F} (b : T ‚ä¢ f) (ss : T ‚äÜ U) : U ‚ä¢ f := weakening' ss b

lemma Consistent.of_subset {T U : Set F} (h : Consistent U) (ss : T ‚äÜ U) : Consistent T := ‚ü®fun b => h.false (weakening b ss)‚ü©

lemma inConsistent_of_proof {T : Set F} (b : T ‚ä¢ ‚ä•) : ¬¨Consistent T := by simp[Consistent]; exact ‚ü®b‚ü©

end Proof

def Proof.hom [Proof F] {G : Type u} [LogicSymbol G] (F : G ‚ÜíL F) : Proof G where
  Bew := fun T g => F '' T ‚ä¢ F g
  axm := fun h => Proof.axm (Set.mem_image_of_mem F h)
  weakening' := fun h => by simp; exact Proof.weakening' (Set.image_subset F h)

/- Semantics of F -/

class Semantics (F : Type u) [LogicSymbol F] (Struc : outParam (Type w ‚Üí Type v)) where
  realize : {M : Type w} ‚Üí Struc M ‚Üí F ‚ÜíL Prop

namespace Semantics
variable {Struc : Type w ‚Üí Type v} [ùì¢ : Semantics F Struc]

def realizeTheory {M : Type w} (s : Struc M) (T : Set F) : Prop :=
    ‚àÄ ‚¶Éf‚¶Ñ, f ‚àà T ‚Üí realize s f

postfix:max " ‚äß‚Çõ " => realize

infix:55 " ‚äß‚Çõ* " => realizeTheory

def consequence (T : Set F) (f : F) : Prop :=
    ‚àÄ (M : Type w) [Inhabited M] (s : Struc M), s ‚äß‚Çõ* T ‚Üí s ‚äß‚Çõ f

-- note that ‚ä® (\vDash) is *NOT* ‚äß (\models)
infix:55 " ‚ä® " => consequence

def Valid (f : F) : Prop := ‚àÄ ‚¶ÉM : Type w‚¶Ñ [Inhabited M] (s : Struc M), s ‚äß‚Çõ f

def Valid‚Çõ (T : Set F) : Prop := ‚àÄ ‚¶ÉM : Type w‚¶Ñ [Inhabited M] (s : Struc M), s ‚äß‚Çõ* T

def Satisfiable (f : F) : Prop := ‚àÉ (M : Type w) (_ : Inhabited M) (s : Struc M), s ‚äß‚Çõ f

def Satisfiable‚Çõ (T : Set F) : Prop := ‚àÉ (M : Type w) (_ : Inhabited M) (s : Struc M), s ‚äß‚Çõ* T

lemma valid_neg_iff (f : F) : Valid (~f) ‚Üî ¬¨Satisfiable f := by simp[Valid, Satisfiable]

lemma not_satisfiable_finset [DecidableEq F] (t : Finset F) :
    ¬¨Satisfiable‚Çõ (t : Set F) ‚Üî Valid (t.image (~¬∑)).disj :=
  by simp[Satisfiable‚Çõ, realizeTheory, Valid, Finset.map_disj]

lemma realizeTheory_of_subset {T U : Set F} {s : Struc M} (h : s ‚äß‚Çõ* U) (ss : T ‚äÜ U) : s ‚äß‚Çõ* T :=
  fun _ hf => h (ss hf)

@[simp] lemma realizeTheoryEmpty {s : Struc M} : s ‚äß‚Çõ* (‚àÖ : Set F) := fun p => by simp

@[simp] lemma realizeTheory_insert {T : Set F} {f : F} {s : Struc M} :
    s ‚äß‚Çõ* insert f T ‚Üî s ‚äß‚Çõ f ‚àß s ‚äß‚Çõ* T := by
  simp[realizeTheory]

@[simp] lemma realizeTheory_union {T U : Set F} {s : Struc M} :
    s ‚äß‚Çõ* T ‚à™ U ‚Üî s ‚äß‚Çõ* T ‚àß s ‚äß‚Çõ* U := by
  simp[realizeTheory]
  exact
  ‚ü®fun h => ‚ü®fun f hf => h (Or.inl hf), fun f hf => h (Or.inr hf)‚ü©,
   by rintro ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© f (h | h); exact h‚ÇÅ h; exact h‚ÇÇ h‚ü©

@[simp] lemma realizeTheory_image {f : Œ± ‚Üí F} {A : Set Œ±} {s : Struc M} :
    s ‚äß‚Çõ* f '' A ‚Üî ‚àÄ i ‚àà A, s ‚äß‚Çõ (f i) := by simp[realizeTheory]

@[simp] lemma realizeTheory_range {f : Œ± ‚Üí F} {s : Struc M} :
    s ‚äß‚Çõ* Set.range f ‚Üî ‚àÄ i, s ‚äß‚Çõ (f i) := by simp[realizeTheory]

lemma satisfiable‚Çõ_of_subset {T U : Set F} (h : Satisfiable‚Çõ U) (ss : T ‚äÜ U) : Satisfiable‚Çõ T :=
  by rcases h with ‚ü®M, i, s, h‚ü©; exact ‚ü®M, i, s, realizeTheory_of_subset h ss‚ü©

lemma consequence_iff {T : Set F} {f : F} : T ‚ä® f ‚Üî ¬¨Satisfiable‚Çõ (insert (~f) T) := by
  simp[consequence, Satisfiable‚Çõ]; constructor
  ¬∑ intro h M hM s hf hT; have : s ‚äß‚Çõ f := h M s hT; contradiction
  ¬∑ intro h M hM s; contrapose; exact h M hM s

end Semantics

variable (F)
variable [LogicSymbol F] [ùìë : Proof F] {Struc : Type w ‚Üí Type v} [ùì¢ : Semantics F Struc]

class Sound where
  sound : ‚àÄ {T : Set F} {p : F}, T ‚ä¢ p ‚Üí T ‚ä® p

class Compact where
  compact {T : Set F} : Semantics.Satisfiable‚Çõ T ‚Üî (‚àÄ u : Finset F, (u : Set F) ‚äÜ T ‚Üí Semantics.Satisfiable‚Çõ (u : Set F))

class Complete extends Sound F where
  complete : ‚àÄ {T : Set F} {p : F}, T ‚ä® p ‚Üí T ‚ä¢ p

variable {F}

namespace Sound

variable [Sound F]
variable {M : Type w} [Inhabited M] {s : Struc M}

lemma not_provable_of_countermodel {T : Set F} {p : F}
  (hT : s ‚äß‚Çõ* T) (hp : ¬¨s ‚äß‚Çõ p) : IsEmpty (T ‚ä¢ p) :=
  ‚ü®fun b => by have : s ‚äß‚Çõ p := Sound.sound b M s hT; contradiction‚ü©

lemma consistent_of_model {T : Set F}
  (hT : s ‚äß‚Çõ* T) : Proof.Consistent T :=
  not_provable_of_countermodel (p := ‚ä•) hT (by simp)

lemma consistent_of_satisfiable {T : Set F} : Semantics.Satisfiable‚Çõ T ‚Üí Proof.Consistent T := by
  rintro ‚ü®M, _, s, h‚ü©; exact consistent_of_model h

lemma realize_of_proof {T : Set F} {f} (h : s ‚äß‚Çõ* T) (b : T ‚ä¢ f) : s ‚äß‚Çõ f :=
  Sound.sound b M s h

lemma realizeTheory_of_proofTheory {T U : Set F} (h : s ‚äß‚Çõ* T) (b : T ‚ä¢* U) : s ‚äß‚Çõ* U :=
  fun _ hf => realize_of_proof h (b hf)

end Sound

namespace Compact

variable [Compact F]
variable {M : Type w} [Inhabited M] {s : Struc M}

lemma conseq_compact [DecidableEq F] {f : F} :
    T ‚ä® f ‚Üî ‚àÉ u : Finset F, ‚Üëu ‚äÜ T ‚àß u ‚ä® f := by
  simp[Semantics.consequence_iff, compact (T := insert (~f) T)]
  constructor
  ¬∑ intro ‚ü®u, ss, hu‚ü©; exact ‚ü®Finset.erase u (~f), by simp[ss], by { simp; intro h; exact hu (Semantics.satisfiable‚Çõ_of_subset h (by simp)) }‚ü©
  ¬∑ intro ‚ü®u, ss, hu‚ü©; exact ‚ü®insert (~f) u, by simpa using Set.insert_subset_insert ss, by simpa using hu‚ü©

end Compact

namespace Complete

variable [Complete F]

lemma satisfiable‚Çõ_iff_consistent {T : Set F} : Semantics.Satisfiable‚Çõ T ‚Üî Proof.Consistent T :=
  ‚ü®Sound.consistent_of_satisfiable,
   by contrapose; intro h
      have : T ‚ä® ‚ä•
      { intro M i s hM; have : Semantics.Satisfiable‚Çõ T := ‚ü®M, i, s, hM‚ü©; contradiction }
      have : T ‚ä¢ ‚ä• := complete this
      exact Proof.inConsistent_of_proof this‚ü©

lemma not_satisfiable_iff_inconsistent {T : Set F} : ¬¨Semantics.Satisfiable‚Çõ T ‚Üî Nonempty (T ‚ä¢ ‚ä•) := by
  simp[satisfiable‚Çõ_iff_consistent, Proof.Consistent]

end Complete

end Logic

end LO
